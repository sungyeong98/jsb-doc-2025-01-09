/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/question_list/{question_id}/answer_list/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 댓글 수정 */
        put: operations["modifyAnswer"];
        post?: never;
        /** 댓글 삭제 */
        delete: operations["deleteAnswer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question_list/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글 상세보기 */
        get: operations["getDetail"];
        /** 글 수정 */
        put: operations["modifyQuestion"];
        post?: never;
        /** 글 삭제 */
        delete: operations["deleteQuestion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글 목록 출력 */
        get: operations["getList"];
        put?: never;
        /** 글 작성 */
        post: operations["createQuestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question_list/{question_id}/answer_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 댓글 조회 */
        get: operations["getAnswers"];
        put?: never;
        /** 댓글 생성 */
        post: operations["createAnswer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 프로필 */
        get: operations["profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/profile/my-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 글 조회 */
        get: operations["myList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/question_list/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 통계정보 */
        get: operations["questionStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 로그아웃 */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AnswerModifyReqbody: {
            content: string;
        };
        AnswerDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            /** Format: int64 */
            questionId?: number;
            /** Format: int64 */
            authorId?: number;
            authorName?: string;
            content?: string;
        };
        RsDataAnswerDto: {
            resultCode?: string;
            msg?: string;
            data?: components["schemas"]["AnswerDto"];
        };
        QuestionModifyReqBody: {
            subject: string;
            content: string;
            published?: boolean;
            listed?: boolean;
        };
        QuestionDetailDto: {
            /** Format: int64 */
            id?: number;
            subject?: string;
            content?: string;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            author?: string;
            published?: boolean;
            listed?: boolean;
        };
        RsDataQuestionDetailDto: {
            resultCode?: string;
            msg?: string;
            data?: components["schemas"]["QuestionDetailDto"];
        };
        UserSignupReqBody: {
            username: string;
            password: string;
            nickname: string;
            email: string;
        };
        RsDataSiteUserDto: {
            resultCode?: string;
            msg?: string;
            data?: components["schemas"]["SiteUserDto"];
        };
        SiteUserDto: {
            /** Format: int64 */
            id?: number;
            nickname?: string;
            email?: string;
            apiKey?: string;
            /** Format: date-time */
            createdDatetime?: string;
            /** Format: date-time */
            modifiedDatetime?: string;
        };
        UserLoginReqBody: {
            username: string;
            password: string;
        };
        RsDataUserLoginResBody: {
            resultCode?: string;
            msg?: string;
            data?: components["schemas"]["UserLoginResBody"];
        };
        UserLoginResBody: {
            item?: components["schemas"]["SiteUserDto"];
            apiKey?: string;
            accessToken?: string;
        };
        QuestionCreateReqBody: {
            subject: string;
            content: string;
            published?: boolean;
            listed?: boolean;
        };
        AnswerCreateReqbody: {
            content: string;
        };
        PageDtoQuestionListDto: {
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalItems?: number;
            items?: components["schemas"]["QuestionListDto"][];
        };
        QuestionListDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            subject?: string;
            author?: string;
            published?: boolean;
            listed?: boolean;
        };
        QuestionStatisticsResBody: {
            /** Format: int64 */
            totalQuestionCount?: number;
            /** Format: int64 */
            totalPublishedCount?: number;
            /** Format: int64 */
            totalListedCount?: number;
        };
        RsDataVoid: {
            resultCode?: string;
            msg?: string;
            data?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    modifyAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerModifyReqbody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAnswerDto"];
                };
            };
        };
    };
    deleteAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: number;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["QuestionDetailDto"];
                };
            };
        };
    };
    modifyQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionModifyReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataQuestionDetailDto"];
                };
            };
        };
    };
    deleteQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignupReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSiteUserDto"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLoginReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataUserLoginResBody"];
                };
            };
        };
    };
    getList: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                searchKeywordType?: string;
                searchKeyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageDtoQuestionListDto"];
                };
            };
        };
    };
    createQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataQuestionDetailDto"];
                };
            };
        };
    };
    getAnswers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["AnswerDto"][];
                };
            };
        };
    };
    createAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                question_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnswerCreateReqbody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataAnswerDto"];
                };
            };
        };
    };
    profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["SiteUserDto"];
                };
            };
        };
    };
    myList: {
        parameters: {
            query?: {
                searchKeywordType?: string;
                searchKeyword?: string;
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageDtoQuestionListDto"];
                };
            };
        };
    };
    questionStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["QuestionStatisticsResBody"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}
